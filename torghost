#!/usr/bin/python

import os
import sys
from commands import getoutput
import time
import signal
from json import load
from urllib2 import urlopen

class bcolors:
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    RED = '\033[31m'
    YELLOW = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    BGRED = '\033[41m'
    WHITE = '\033[37m'


def t():
    current_time = time.localtime()
    ctime = time.strftime('%H:%M:%S', current_time)
    return "["+ ctime + "]"
def shutdown():
	print ""
	print bcolors.BGRED + bcolors.WHITE + t() + "[info] shutting down torghost" + bcolors.ENDC +"\n\n"
	sys.exit()


def sigint_handler(signum, frame):
    print '\n user interrupt ! shutting down'
    shutdown()

def logo():
	os.system("clear")
	print bcolors.BLUE + bcolors.BOLD
	print """
      _____           ____ _               _
     |_   _|__  _ __ / ___| |__   ___  ___| |_
       | |/ _ \| '__| |  _| '_ \ / _ \/ __| __|
       | | (_) | |  | |_| | | | | (_) \__ \ |_
       |_|\___/|_|   \____|_| |_|\___/|___/\__|
	v1.0 - SusmithHCK | www.khromozome.com 

    """
	print bcolors.ENDC
def usage():
	logo()
	print """

	USAGE:
        torghost start -----(start torghost)
        torghost stop  -----(stop torghost)

    """
	sys.exit()

def ip():
	while True:
		try:
			ipadd = load(urlopen('http://jsonip.com/'))['ip']
		except urllib2.URLError:
			continue
		break
	return ipadd

signal.signal(signal.SIGINT, sigint_handler)

TorrcCfgString = """
VirtualAddrNetwork 10.0.0.0/10
AutomapHostsOnResolve 1
TransPort 9040
DNSPort 53
"""

resolvString = "nameserver 127.0.0.1"

Torrc = "/etc/tor/torrc"
resolv = "/etc/resolv.conf"


def start_torghost():



	if TorrcCfgString in open(Torrc).read():
	    print t()+" Torrc file already configured"
	else:
		with open(Torrc, "a") as myfile:
			print t()+" Configuring torrc file.. ",
			myfile.write(TorrcCfgString)
			print bcolors.GREEN+"[done]"+bcolors.ENDc
	if resolvString in open(resolv).read():
	    print t()+" DNS resolv.conf file already configured"
	else:
		with open(resolv, "w") as myfile:
			print t()+" Configuring DNS resolv.conf file.. ",
			myfile.write(resolvString)
			print bcolors.GREEN+"[done]"+bcolors.ENDC

	print t()+" Starting tor service.. ",
	os.system("service tor start")
	print bcolors.GREEN+"[done]"+bcolors.ENDC
	print t()+" setting up iptables rules",

	iptables_rules = """
	NON_TOR="192.168.1.0/24 192.168.0.0/24"
	TOR_UID=%s
	TRANS_PORT="9040"

#	iptables -F
#	iptables -t nat -F
#	iptables -P INPUT DROP
#	iptables -P FORWARD DROP
#	iptables -P OUTPUT DROP

	iptables -t nat -A OUTPUT -m owner --uid-owner $TOR_UID -j RETURN
	iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 53
	for NET in $NON_TOR 127.0.0.0/9 127.128.0.0/10; do
	 iptables -t nat -A OUTPUT -d $NET -j RETURN
	done
	iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TRANS_PORT

	iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	for NET in $NON_TOR 127.0.0.0/8; do
	 iptables -A OUTPUT -d $NET -j ACCEPT
	done
	iptables -A OUTPUT -m owner --uid-owner $TOR_UID -j ACCEPT
	iptables -A OUTPUT -j REJECT
	"""%(getoutput("id -ur debian-tor"))

	os.system(iptables_rules)
	print bcolors.GREEN+"[done]"+bcolors.ENDC
	print t()+" Fetching current IP..."
	print t()+" CURRENT IP : "+bcolors.GREEN+ip()+bcolors.ENDC

def stop_torghost():
	print bcolors.RED+t()+"STOPPING torghost"+bcolors.ENDC
	print t()+" Flushing iptables, resetting to default",
	IpFlush = """


	iptables -t nat -F
	iptables -t mangle -F
	iptables -F	
	iptables -X

ipt=iptables
ip6=ip6tables

$ipt -F
$ipt -Z
$ipt -X

$ipt -P INPUT DROP 
$ipt -P FORWARD DROP 
$ipt -P OUTPUT ACCEPT
$ip6 -P INPUT DROP 
$ip6 -P FORWARD DROP 
$ip6 -P OUTPUT DROP
$ipt -N TCP 
$ipt -N syn_flood
$ipt -N UDP 

$ipt -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
$ipt -A INPUT -i lo -j ACCEPT
$ipt -A INPUT -m conntrack --ctstate INVALID -j DROP
$ipt -A INPUT -p icmp -m icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT
$ipt -A INPUT -p udp -m conntrack --ctstate NEW -j UDP
$ipt -A INPUT -p tcp --tcp-flags FIN,SYN,RST,ACK SYN -m conntrack --ctstate NEW -j TCP
$ipt -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
$ipt -A INPUT -j REJECT --reject-with icmp-proto-unreachable
$ipt -A INPUT -p tcp -j REJECT --reject-with tcp-reset
$ipt -A INPUT -j REJECT --reject-with icmp-proto-unreachable
$ipt -A INPUT -p tcp -m recent --set --name TCP-PORTSCAN -j REJECT --reject-with tcp-reset
$ipt -A syn_flood -m limit --limit 10/second --limit-burst 5 -j RETURN
$ipt -A syn_flood -j DROP
$ipt -A INPUT -p tcp --syn -j syn_flood

for net in 80 443; do
$ipt -A TCP -p tcp --sport $net -j ACCEPT

done


$ipt -I TCP -p tcp -m recent --update --seconds 60 --name TCP-PORTSCAN -j REJECT --reject-with tcp-reset


$ipt -I UDP -p udp -m recent --update --seconds 60 --name UDP-PORTSCAN -j REJECT --reject-with icmp-port-unreachable


echo "nameserver 208.67.222.222" > /etc/resolv.conf
echo "nameserver 208.67.220.220" >> /etc/resolv.conf






	"""
	os.system(IpFlush)
	print bcolors.GREEN+"[done]"+bcolors.ENDC
	print t()+" Restarting Network manager",
	os.system("service network-manager restart")
	print bcolors.GREEN+"[done]"+bcolors.ENDC
	print t()+" Fetching current IP..."
	print t()+" CURRENT IP : "+bcolors.GREEN+ip()+bcolors.ENDC

arg = sys.argv[1:]


if len(arg)!=1:
	usage()
elif sys.argv[1] == "start":
	logo()
	start_torghost()
elif sys.argv[1] == "stop":
	logo()
	stop_torghost()
else:
	usage()
